#!/bin/sh -e
#
# 2011,2013 Nico Schottelius (nico-cdist at schottelius.org)
# 2012 Giel van Schijndel (giel plus cdist at mortis dot eu)
# 2020 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#
# Manage packages on OpenWrt, optware, and co.
#

if test -f "${__object}/parameter/name"
then
   name=$(cat "${__object}/parameter/name")
else
   name=$__object_id
fi

state_should=$(cat "${__object}/parameter/state")
state_is=$(cat "${__object}/explorer/pkg_status")

case $state_is
in
	(absent*)
		presence=$(echo "${state_is}" | cut -d ' ' -f 2)
		state_is='absent'
		;;
esac

if test "${state_is}" = "${state_should}"
then
	exit 0
fi

cat <<'EOF'
__type_path=${__object%%${__object_id}*}

LOCKFILE="${__type_path}/cdist_opkg.lock"
_lock() (
	set -o noclobber
	until echo $$>"${LOCKFILE}"
	do
		while test -f "${LOCKFILE}"; do sleep 1; done
	done

) 2>/dev/null
_unlock() {
	if test -s "${LOCKFILE}" && test "$(cat "${LOCKFILE}")" = $$
	then
		rm "${LOCKFILE}"
	fi
}
EOF

# NOTE: We need to lock parallel execution of code-remote to ensure that it is
# not executed concurrently with a type explorer.
# opkg will try to acquire the OPKG lock (usually /var/lock/opkg.lock) using
# lockf(2) for every operation.
# It will not wait for the lock but terminate with an error leading to an
# incorrect outcome.
echo 'trap _unlock EXIT'
echo '_lock'

case $state_should
in
	(present)
		if test "${presence}" = 'notpresent'
		then
			echo 'opkg --verbosity=0 update'
		fi

		printf "opkg --verbosity=0 install '%s'\n" "${name}"
		echo 'installed' >>"${__messages_out}"
		;;
	(absent)
		printf "opkg --verbosity=0 remove '%s'" "${name}"
		echo 'removed' >>"${__messages_out}"
		;;
	(*)
		printf 'Unknown state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac
