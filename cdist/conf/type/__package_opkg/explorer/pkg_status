#!/bin/sh -e
#
# 2011 Nico Schottelius (nico-cdist at schottelius.org)
# 2012 Giel van Schijndel (giel plus cdist at mortis dot eu)
# 2020 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#
# Retrieve the status of a package - parses opkg output
#

readonly __type_path=${__object%%${__object_id}*}
test -d "${__type_path}" || { echo 'Cannot determine __type_path' >&2; exit 1; }
readonly LOCKDIR="${__type_path:?}/.cdist_opkg.lock.dir"

_lock() {
	until mkdir "${LOCKDIR:?}" 2>/dev/null
	do
		while test -d "${LOCKDIR}"
		do
			# DEBUG: printf 'Locked by PID: %u\n' "$(cat "${LOCKDIR}/pid")"
			sleep 1
		done
	done
	echo $$ >"${LOCKDIR:?}/pid"
}
_unlock() {
	test -d "${LOCKDIR}" || return 0
	if test -s "${LOCKDIR}/pid"
	then
		test "$(cat "${LOCKDIR}/pid")" = $$ || return 1
		rm "${LOCKDIR:?}/pid"
	fi
	rmdir "${LOCKDIR:?}"
}


if test -f "${__object}/parameter/name"
then
	pkg_name=$(cat "${__object}/parameter/name")
else
	pkg_name=$__object_id
fi


# NOTE: We need to lock parallel execution of type explorers and code-remote
# because opkg will try to acquire the OPKG lock (usually /var/lock/opkg.lock)
# using lockf(2) for every operation.
# It will not wait for the lock but terminate with an error.
# This leads to incorrect 'absent notpresent' statuses when parallel execution
# is enabled.
trap _unlock EXIT
_lock


# Except opkg failing, if package is not known / installed
if opkg status "${pkg_name}" 2>/dev/null \
	| grep -q -e '^Status: [^ ][^ ]* [^ ][^ ]* installed$'
then
	echo 'present'
elif opkg info "${pkg_name}" 2>/dev/null | grep -q .
then
	echo 'absent notpresent'
else
	echo 'absent'
fi
